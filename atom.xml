<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Embark</title>
  
  <subtitle>A simple &amp; powerful framework for decentralized applications</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://embark.status.im/"/>
  <updated>2018-08-27T17:40:18.527Z</updated>
  <id>https://embark.status.im/</id>
  
  <author>
    <name>Embark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Embark by Status 3.1</title>
    <link href="https://embark.status.im/news/2018/06/20/embark-3-1-released/"/>
    <id>https://embark.status.im/news/2018/06/20/embark-3-1-released/</id>
    <published>2018-06-20T00:00:00.000Z</published>
    <updated>2018-08-27T17:40:18.527Z</updated>
    
    <content type="html"><![CDATA[<p>More info can be found in the <a href="https://blog.status.im/embark-3-1-planet-express-60493ca0ad79" target="_blank" rel="noopener">medium post</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;More info can be found in the &lt;a href=&quot;https://blog.status.im/embark-3-1-planet-express-60493ca0ad79&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;medi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Embark by Status 3.0</title>
    <link href="https://embark.status.im/news/2018/05/04/embark-3-0-released/"/>
    <id>https://embark.status.im/news/2018/05/04/embark-3-0-released/</id>
    <published>2018-05-04T00:00:00.000Z</published>
    <updated>2018-09-14T19:19:06.526Z</updated>
    
    <content type="html"><![CDATA[<p>Embark is now part of <a href="https://status.im/" target="_blank" rel="noopener">Status</a> and we are happy to announce Embark 3.0 by Status!</p><h3 id="New-website-and-Documentation"><a href="#New-website-and-Documentation" class="headerlink" title="New website and Documentation"></a>New website and Documentation</h3><p>Embark has a new website and up to date documentation which can be found at <a href="https://embark.status.im/docs/">https://embark.status.im/docs/</a></p><h3 id="More-Smart-Contract-Languages"><a href="#More-Smart-Contract-Languages" class="headerlink" title="More Smart Contract Languages"></a>More Smart Contract Languages</h3><p>Besides Solidity, Embark now also supports <a href="https://github.com/ethereum/vyper/" target="_blank" rel="noopener">Vyper</a> out of the box, as well as <a href="https://github.com/pirapira/bamboo" target="_blank" rel="noopener">Bamboo</a> through an embark <a href="https://github.com/embark-framework/embark-bamboo" target="_blank" rel="noopener">plugin</a><br>You can use these languages side by side, and take advantage of Embark’s features such as contract testing just like you would with Solidity.</p><h3 id="DApp-Imports"><a href="#DApp-Imports" class="headerlink" title="DApp Imports"></a>DApp Imports</h3><p>From the dapp side, contracts and libs like EmbarkJS can be implicitly imported, for e.g to import a contract:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SimpleStorage <span class="keyword">from</span> <span class="string">'Embark/contracts/SimpleStorage'</span></span><br></pre></td></tr></table></figure><p>EmbarkJS:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmbarkJS <span class="keyword">from</span> <span class="string">'Embark/EmbarkJS'</span></span><br></pre></td></tr></table></figure><p>Or a initialized web3 instances (with the config of <code>config/contracts.json</code>)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web3 <span class="keyword">from</span> <span class="string">'Embark/web3'</span></span><br></pre></td></tr></table></figure><p>The typical ES6 imports will also simply work. You can even import directly css files inside js files:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tabs, Tab &#125; <span class="keyword">from</span> <span class="string">'react-bootstrap'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./dapp.css'</span>;</span><br></pre></td></tr></table></figure><h3 id="Friendlier-torwards-contracts-only-projects"><a href="#Friendlier-torwards-contracts-only-projects" class="headerlink" title="Friendlier torwards contracts-only projects"></a>Friendlier torwards contracts-only projects</h3><p>Although Embark is focused on DApps, it can perfectly be used for projects targeting only smart contracts and no other components.</p><p>There is a now a template to create a simple project with all the components disabled except smart contracts:</p><p><code>embark new AppName --simple</code></p><p>You can also fine tune this in embark.json by specifying the config of each component or setting it to false if you don’t want it.</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"config": &#123;</span><br><span class="line">  "contracts": "contracts.json",</span><br><span class="line">  "blockchain": false,</span><br><span class="line">  "storage": false,</span><br><span class="line">  "communication": false,</span><br><span class="line">  "webserver": false</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Embark-Graph"><a href="#Embark-Graph" class="headerlink" title="Embark Graph"></a>Embark Graph</h3><p>The command <code>embark graph</code> will generate a ER graph of the dapp contracts. This takes into account not just the inheritance but also the relationships specified in the configuration.</p><h3 id="Config-contracts-from-URIs"><a href="#Config-contracts-from-URIs" class="headerlink" title="Config contracts from URIs"></a>Config contracts from URIs</h3><p>Embark now supports referencing directly URIs including http, git, github, or directly files contained in other directories than the ones specified in embark.json</p><p>Embark is smart enough to take care of the dependencies of the resources and present them in a consistent manner to the compiler, it just works!</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"contracts"</span>: &#123;</span><br><span class="line">      <span class="attr">"ERC725"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"git://github.com/status/contracts/contracts/identity/ERC725.sol#develop"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"ERC725"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"github.com/status/contracts/contracts/identity/ERC725.sol"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Ownable"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"SimpleStorage"</span>: &#123;</span><br><span class="line">        <span class="attr">"file"</span>: <span class="string">"./some_folder/simple_storage.sol"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Importing-contracts-from-URIs-directly-in-Solidity"><a href="#Importing-contracts-from-URIs-directly-in-Solidity" class="headerlink" title="Importing contracts from URIs directly in Solidity"></a>Importing contracts from URIs directly in Solidity</h3><p>You can also import the same URIs directly in solidity which is quite useful for interfaces, e.g:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"git://github.com/status/contracts/contracts/identity/ERC725.sol#develop"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/status/contracts/contracts/identity/ERC725.sol"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol"</span></span><br><span class="line"></span><br><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Contracts-from-npm-packages"><a href="#Contracts-from-npm-packages" class="headerlink" title="Contracts from npm packages"></a>Contracts from npm packages</h3><p>You can now install npm packages that contain contracts (e.g <code>npm install --save openzeppelin-solidity</code>) and refer them to them in the contracts.json file:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">    <span class="string">"contracts"</span>: &#123;</span><br><span class="line">      <span class="string">"ERC20"</span>: &#123;</span><br><span class="line">        file: <span class="string">"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or even import them directly in solidity without the need for the config:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;openzeppelin-solidity/contracts/ownership/Ownable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyContract is Ownable &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Embark-Demo-App"><a href="#Embark-Demo-App" class="headerlink" title="Embark Demo App"></a>Embark Demo App</h3><p>The demo app has been updated to reflect the new structure. It also now uses ReactJS which provides a good example on how to use React with Embark.</p><h3 id="Web3-js-1-0-by-default"><a href="#Web3-js-1-0-by-default" class="headerlink" title="Web3.js 1.0 by default"></a>Web3.js 1.0 by default</h3><p>Embark now uses web3.js 1.0 in all layers, including in the console and in contracts testing.</p><h3 id="More-contract-deploy-configs"><a href="#More-contract-deploy-configs" class="headerlink" title="More contract deploy configs"></a>More contract deploy configs</h3><p>A new config called <code>afterDeploy</code> is available and it can be used to specify actions to run after all contracts have been deployed.<br>It’s possible to also specify the specific account to deploy from using the directive <code>from</code> or <code>fromIndex</code></p><h3 id="Versions-Configuration"><a href="#Versions-Configuration" class="headerlink" title="Versions Configuration"></a>Versions Configuration</h3><p>The versions config has been moved to embark.json, the download mechanism has also been fastly improved under the hood:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;versions&quot;: &#123;</span><br><span class="line">  &quot;web3&quot;: &quot;1.0.0-beta&quot;,</span><br><span class="line">  &quot;solc&quot;: &quot;0.4.23&quot;,</span><br><span class="line">  &quot;ipfs-api&quot;: &quot;17.2.4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Test-Improvements"><a href="#Test-Improvements" class="headerlink" title="Test Improvements"></a>Test Improvements</h3><p>In the tests you can now specify a mnemonic:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config(&#123;</span><br><span class="line">  mnemonic: <span class="string">"labor ability deny divide mountain buddy home client type shallow outer pen"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>It’s also possible to specify a node, in case you don’t want to run in the internal vm:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">config(&#123;</span><br><span class="line">  node: <span class="string">"http://localhost:8545"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="Swarm-support"><a href="#Swarm-support" class="headerlink" title="Swarm support"></a>Swarm support</h3><p>Swarm is now completely integrated on-par with IPFS. You can use interact with Swarm on the dapp side, as well as upload your dapp to Swarm.Swarm</p><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><p>For a complete list please refer to the <a href="https://github.com/embark-framework/embark/releases/tag/3.0.0" target="_blank" rel="noopener">release notes in github</a></p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/embark-framework/Lobby" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Embark is now part of &lt;a href=&quot;https://status.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Status&lt;/a&gt; and we are happy to announce Embark 3.0 by S
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Embark 2.6.0 - web3.js 1.0, any version of web3.js &amp; solc. Whisper 5 &amp; much more</title>
    <link href="https://embark.status.im/news/2017/10/25/embark-2-6-released/"/>
    <id>https://embark.status.im/news/2017/10/25/embark-2-6-released/</id>
    <published>2017-10-25T00:00:00.000Z</published>
    <updated>2018-08-27T17:40:18.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="To-Update-to-2-6-0"><a href="#To-Update-to-2-6-0" class="headerlink" title="To Update to 2.6.0"></a>To Update to 2.6.0</h3><p><strong>important</strong></p><p>Embark’s npm package has changed from <code>embark-framework</code> to <code>embark</code>, this sometimes can create conflicts. To update, first uninstall embark-framework 1 to avoid any conflicts with <code>npm uninstall -g embark-framework</code> followed by <code>npm install -g embark</code></p><p>to update from 2.5.2:</p><p><code>npm install -g embark@2.6</code></p><p>afterwards make sure <code>embark version</code> returns <code>2.6.0</code>.</p><h3 id="In-this-release"><a href="#In-this-release" class="headerlink" title="In this release"></a>In this release</h3><p>You no longer need to wait for new releases of embark when a new version of web3.js or solc comes out as this can be now configured. Embark will take care of downloading and using the new versions. You can specify a list of nodes the dapp should attempt to connect to (instead of being limited 1). Whisper 5 is now supported.</p><h3 id="Support-for-web3-js-1-0-and-nearly-ANY-web3-js-version"><a href="#Support-for-web3-js-1-0-and-nearly-ANY-web3-js-version" class="headerlink" title="Support for web3.js 1.0 and (nearly) ANY web3.js version"></a>Support for web3.js 1.0 and (nearly) ANY web3.js version</h3><p>Embark now supports web3.js 1.0 by default, however you can now also specify exactly which version of web3.js you want to use so you can still use 0.19.0 or newer versions of 1.0.</p><p>in config/contracts.json</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">   ....</span><br><span class="line">   <span class="string">"versions"</span>: &#123;</span><br><span class="line">      <span class="string">"web3.js"</span>: <span class="string">"1.0.0-beta"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If ,for example, you wish to use 0.19.0 you can specify it in the config as <code>&quot;web3.js&quot;: &quot;0.19.0&quot;</code></p><h3 id="Support-for-ANY-solc-version"><a href="#Support-for-ANY-solc-version" class="headerlink" title="Support for ANY solc version"></a>Support for ANY solc version</h3><p>You can also configure the solc compiler you wish to use and it should work, so long that solc release does not contain breaking API changes.</p><p><code>config/contracts.json</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">   ....</span><br><span class="line">   <span class="string">"versions"</span>: &#123;</span><br><span class="line">      <span class="string">"solc"</span>: <span class="string">"0.4.17"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specify-nodes-DApp-should-attempt-to-connect-to"><a href="#Specify-nodes-DApp-should-attempt-to-connect-to" class="headerlink" title="Specify nodes DApp should attempt to connect to"></a>Specify nodes DApp should attempt to connect to</h3><p>You can specify which nodes your dapp should try to connect in each enviroment. “$WEB3” is a special keyword to specify the existing web3 object.<br>The following config would attempt to use the existing web3 object and if unavailable attempt to connect to localhost:8545</p><p><code>config/contracts.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"development"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"dappConnection"</span>: [</span><br><span class="line">      <span class="string">"$WEB3"</span>,</span><br><span class="line">      <span class="string">"http://localhost:8545"</span></span><br><span class="line">    ],</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-node-to-deploy-to"><a href="#Specify-node-to-deploy-to" class="headerlink" title="Specify node to deploy to"></a>Specify node to deploy to</h3><p>Before Embark would assume this would be the same as the one configured in blockchain.json which could lead to some ackward configs for some devs, this has now been changed so you can specify it in the contracts config.</p><p><code>config/contracts.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"development"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"deployment"</span>: &#123;</span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"port"</span>: <span class="number">8545</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"rpc"</span></span><br><span class="line">    &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-node-to-connect-whisper-to"><a href="#Specify-node-to-connect-whisper-to" class="headerlink" title="Specify node to connect whisper to"></a>Specify node to connect whisper to</h3><p><code>config/communication.json</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"default"</span>: &#123;</span><br><span class="line">    <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"provider"</span>: <span class="string">"whisper"</span>,</span><br><span class="line">    <span class="string">"available_providers"</span>: [<span class="string">"whisper"</span>, <span class="string">"orbit"</span>],</span><br><span class="line">    <span class="string">"connection"</span>: &#123;</span><br><span class="line">      <span class="string">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"port"</span>: <span class="number">8546</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"ws"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Specify-url-to-get-assets"><a href="#Specify-url-to-get-assets" class="headerlink" title="Specify url to get assets"></a>Specify url to get assets</h3><p>You can specify for each environment what IPFS node to get the assets from</p><p><code>config/storage.json</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"development"</span>: &#123;</span><br><span class="line">      ....</span><br><span class="line">     <span class="string">"getUrl"</span>: <span class="string">"http://localhost:8080/ipfs/"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   ...</span><br><span class="line">  <span class="string">"livenet"</span>: &#123;</span><br><span class="line">      ....</span><br><span class="line">      <span class="string">"getUrl"</span>: <span class="string">"https://gateway.ipfs.io/ipfs/"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Plugin-API-changes"><a href="#Plugin-API-changes" class="headerlink" title="Plugin API changes"></a>Plugin API changes</h3><p><img src="http://icons.iconarchive.com/icons/elegantthemes/beautiful-flat/128/plugin-icon.png" alt="plugin"></p><p>The following events are deprecated: abi-vanila, abi, abi-contracts-vanila, abi-vanila-deployment and have been renamed to code-vanila, code, code-contracts-vanila, code-vanila-deployment</p><p>plugins that use these events will get deprecation warnings, the deprecated events will be removed in 2.7.0</p><h3 id="New-Blockchain-options"><a href="#New-Blockchain-options" class="headerlink" title="New Blockchain options"></a>New Blockchain options</h3><p><img src="https://dappsforbeginners.files.wordpress.com/2015/02/ethereum-logo.jpg?w=200" alt="geth"></p><p>The following fields are now available at <code>config/blockchain.json</code> to enhance <code>embark blockchain</code>:</p><ul><li>“wsHost” - to specify the websocket host (default: localhost)</li><li>“wsPort” - to specify the websocket port (default: 8546)</li><li>“wsOrigins”- to specify the allowed origin of the websocket requests (default: FALSE), must be specified to something like <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> for the websocket connection to work.</li><li>“wsApi” - to specify the apis available through websockets (default: [‘eth’, ‘web3’, ‘net’, ‘shh’])</li></ul><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><p><img src="http://i.imgur.com/L1r6Ac5.png" alt="bug fixes"></p><ul><li>tests no longer need the requires and initialization and can be run directly with embark. however you can still use these requires to run it yourself with mocha or your own preferred test framework</li><li>embark and mocha are no longer dependencies in the created dapp</li><li>you can specify a test file with <code>embark test &lt;filename&gt;</code></li><li>tests no longer need testrpc to be installed first</li><li><code>EmbarkJS.isNewWeb3()</code> to detect if web3 1.0 is available</li><li>demo app updated to use web3.js 1.0 and solc 0.4.17</li><li>warn user when websocket or http CORS is not set</li><li>tolerate solc compiler warnings, which could cause a crash sometimes</li></ul><h3 id="Thank-you"><a href="#Thank-you" class="headerlink" title="Thank you"></a>Thank you</h3><p>A big thanks to all that contributed to this release including <a href="https://github.com/toadkicker" target="_blank" rel="noopener">Todd Baur</a> and Jacob Beauchamp.</p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/iurimatias/embark-framework" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;To-Update-to-2-6-0&quot;&gt;&lt;a href=&quot;#To-Update-to-2-6-0&quot; class=&quot;headerlink&quot; title=&quot;To Update to 2.6.0&quot;&gt;&lt;/a&gt;To Update to 2.6.0&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Embark 2.5.0</title>
    <link href="https://embark.status.im/news/2017/06/28/embark-2-5-released/"/>
    <id>https://embark.status.im/news/2017/06/28/embark-2-5-released/</id>
    <published>2017-06-28T00:00:00.000Z</published>
    <updated>2018-08-27T17:40:18.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="To-Update-to-2-5-0"><a href="#To-Update-to-2-5-0" class="headerlink" title="To Update to 2.5.0"></a>To Update to 2.5.0</h3><p><strong>important</strong></p><p>Embark’s npm package has changed from <code>embark-framework</code> to <code>embark</code>, this sometimes can create conflicts. To update, first uninstall embark-framework 1 to avoid any conflicts with <code>npm uninstall -g embark-framework</code> followed by <code>npm install -g embark</code></p><p>to update from 2.4.2:</p><p><code>npm install -g embark@2.5</code></p><p>afterwards make sure <code>embark version</code> returns <code>2.5.0</code>.</p><h3 id="In-this-release"><a href="#In-this-release" class="headerlink" title="In this release"></a>In this release</h3><p>This release updates to the lastest dependencies, fixes a few things and has a lot of work under the hood necessary for future releases.</p><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><ul><li>support for geth 1.6.5</li><li>updated to use web3.js 0.19.11</li><li>updated to use solc 0.4.11</li></ul><h3 id="Misc-Bugfixes-and-Improvements"><a href="#Misc-Bugfixes-and-Improvements" class="headerlink" title="Misc Bugfixes and Improvements"></a>Misc Bugfixes and Improvements</h3><ul><li><code>embark new</code> will now prompt for the dapp name if not specified as <code>embark new &lt;yourDappName&gt;</code></li><li>embark.js: <code>ContractName.new()</code> as been added as an alias for <code>ContractName.deploy()</code></li><li>embark.js: a method to easily send ether to a contract has been added: <code>ContractName.send(value, unit, options)</code> e.g <code>ContractName.send(2, &quot;ether&quot;, {from: web3.eth.accounts[1]})</code></li><li>orbit: Fix for orbit to make it work if the blockchain component is disabled</li><li>orbit: Use default config for orbit it none is specified in the config file</li><li>Demo app now has warning message for incompatible whisper versions</li><li>the JSON files of the contracts are now being outputted at dist/contracts/ (experimental)</li><li>whisper: Dashboard now displays the whisper version of the node</li><li>plugin API: extensions can now also be added as directories within the dapp directory</li><li>plugin API: plugins can now register a component to be displayed in the dashboard. e.g:</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">embark.registerServiceCheck(<span class="string">'PluginService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (someFunctionThatChecksTheService()) &#123;</span><br><span class="line">     cb(&#123;<span class="attr">name</span>: <span class="string">"MyServiceName"</span>, <span class="attr">status</span>: <span class="string">"on"</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cb(&#123;<span class="attr">name</span>: <span class="string">"MyServiceName"</span>, <span class="attr">status</span>: <span class="string">"off"</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Thank-you"><a href="#Thank-you" class="headerlink" title="Thank you"></a>Thank you</h3><p>A big thanks to all that contributed to this release including <a href="https://github.com/nathanph" target="_blank" rel="noopener">Nathan Hernandez</a>, <a href="https://github.com/atfornes" target="_blank" rel="noopener">Antonio Tenorio-Fornés</a>, <a href="https://github.com/jonjonsonjr" target="_blank" rel="noopener">Jon Johnson</a>, Andy Nogueira,  <a href="https://github.com/roo2" target="_blank" rel="noopener">roo2</a>, <a href="https://github.com/carlmon" target="_blank" rel="noopener">Carl Mönnig</a>, <a href="https://github.com/michaeljyeates" target="_blank" rel="noopener">Michael Yeates</a>, <a href="https://github.com/toadkicker" target="_blank" rel="noopener">Todd Baur</a>, <a href="https://github.com/imtypist" target="_blank" rel="noopener">黄俊钦</a>, <a href="https://github.com/RamiroMoreira" target="_blank" rel="noopener">Ramiro Moreira</a>, <a href="https://github.com/greggdourgarian" target="_blank" rel="noopener">gregg dourgarian</a></p><h3 id="Chatroom"><a href="#Chatroom" class="headerlink" title="Chatroom"></a>Chatroom</h3><p>To discuss about Embark or Dapp development, please <a href="https://gitter.im/iurimatias/embark-framework" target="_blank" rel="noopener">join us at the gitter channel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;To-Update-to-2-5-0&quot;&gt;&lt;a href=&quot;#To-Update-to-2-5-0&quot; class=&quot;headerlink&quot; title=&quot;To Update to 2.5.0&quot;&gt;&lt;/a&gt;To Update to 2.5.0&lt;/h3&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
  </entry>
  
</feed>
